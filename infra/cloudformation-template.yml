AWSTemplateFormatVersion: '2010-09-09'
Description: Optimy DevOps Assessment â€“ EC2 + RDS + Docker PHP App (Fixed for AZ + CIDR conflict)

Parameters:
  KeyName:
    Description: SSH Key name for EC2
    Type: AWS::EC2::KeyPair::KeyName
  DBPassword:
    NoEcho: true
    Description: Root password for MySQL
    Type: String
    MinLength: 8

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: optimy-vpc }]

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: [{ Key: Name, Value: public-subnet-a }]

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.12.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags: [{ Key: Name, Value: public-subnet-b }]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable

  RouteTableAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTable

  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  RDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL from EC2 only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref InstanceSG

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS subnet group with 2 AZs
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB

  MyDB:
    Type: AWS::RDS::DBInstance
    DependsOn: DBSubnetGroup
    Properties:
      Engine: MySQL
      EngineVersion: 8.0
      DBInstanceClass: db.t3.micro
      MasterUsername: root
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 20
      DBName: testdb
      PubliclyAccessible: true
      VPCSecurityGroups: [!Ref RDSSG]
      DBSubnetGroupName: !Ref DBSubnetGroup

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      ImageId: ami-021d9f8e43481e7da  # Ubuntu 22.04 LTS (eu-west-1)
      SubnetId: !Ref SubnetA
      SecurityGroupIds: [!Ref InstanceSG]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          docker run -d -p 80:80 \
            -e DB_HOST=${MyDB.Endpoint.Address} \
            -e DB_USER=root \
            -e DB_PASS=${DBPassword} \
            -e DB_NAME=testdb \
            saisharansaireddygari/php-app:latest

Outputs:
  EC2PublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp

  RDSEndpoint:
    Description: RDS endpoint
    Value: !GetAtt MyDB.Endpoint.Address
